/**************************************************************************************
*                                                                                     *
*           This file is a part of PSD project                                        *
*                                                                                     *
*       -------------------------------------------------------------------           *
*                                                                                     *
*       Copyright 2019-2025 CEA/DES                                                   *
*                                                                                     *
*       Licensed under the Apache License, Version 2.0  (the "License");              *
*       you may not use this file except in compliance with the License.              *
*       You may obtain a copy of the License at                                       *
*                                                                                     *
*           http://www.apache.org/licenses/LICENSE-2.0                                *
*                                                                                     *
*       Unless required by applicable law or agreed to in writing, software           *
*       distributed under the License is distributed on an  "AS IS"  BASIS,           *
*       WITHOUT  WARRANTIES  OR  CONDITIONS  OF  ANY  KIND,  either express           *
*       or implied. See  the License  for  the  specific language governing           *
*       permissions and limitations under the License.                                *
*                                                                                     *
*       -------------------------------------------------------------------           *
*                                                                                     *
*                                                                                     *
*       Comment:  This test simply checks if the loading of MatrixPlotter             *
*                 works well                                                          *
*                                                                                     *
**************************************************************************************/                                                                      
                                                      
//============================================================================
// -------Finite element variables -------                                    
// -------------------------------------------------------------------        
// def2(u) :   displacement vector, it is [ux,uy] in 2D and [ux,uy,uz] in 3D  
// def2(uold)  :   previous iteration displacement vector                     
// epsnl    :   Nonlocal equivalent strain for damage                                 
// epsnlold :   previous iteration nonlocal equivalent strain  
// Tempera : Scalar P1 field for constante temperature in order to use Mfront                                  
// def2(F) : force vector, it is [Fx,Fy] in 2D and [Fx,Fy,Fz] in 3D                                  
//============================================================================
                                                                              
                                                                             
  Vh  def2(u)    ,
      def2(uold) ;
  
  Vh1 epsnl       ,
      Tempera     ,                                                        
      epsnlold    ;
                                                                                                                                                                                                                                                                                                                               
                                                                                                                                     
  Vh  def2(F)    ;  
  
  // P0 scalar fields
  Wh0  lambdafield ,    // Lame's lambda parameter                                          
       mufield     ,    // Lame's mu parameter 
       sig11       ,    // Component s11 of stress stensor
       sig22       ,    // Component s22 of stress stensor
       sig12       ,    // Component s12 of stress stensor
       sp1         ,    // 1st eigenvalue for the stress tensor
       sp2         ,    // 2nd eigenvalue for the stress tensor
       maxsp       ,    // Maximum eigenvalue of the stress tensor
       H11         ,    // Component H11 of Ladeveze's tensor H
       H12	   ,    // Component H12 of Ladeveze's tensor H
       H22	   ,    // Component H22 of Ladeveze's tensor H
       Isv8old     ,    // Component i2H11 of \mathbf{H}^{-2} tensor at previous iteration
       Isv9old     ,    // Component i2H22 of \mathbf{H}^{-2} tensor at previous iteration
       Isv11old    ,    // Component sqrt(2.)*i2H12 of \mathbf{H}^{-2} tensor at previous iteration                                                                                
       I1eps       ,    // First invariant of the strain tensor for equivalent von mises measure
       J2eps       ,    // Second invariant of the strain tensor for equivalent von mises measure
       e11         ,    // Component e11 of the strain tensor                              
       e22         ,    // Component e22 of the strain tensor                              
       e12         ,    // Component e12 of the strain tensor                              
       ep1         ,    // 1st eigenvalue for the strain tensor            
       ep2         ,    // 2nd eigenvalue for the strain tensor  
       D1	   ,    // 1st eigenvalue for the damage tensor 
       D2          ,    // 2nd eigenvalue for the damage tensor       
       detH	   ,    // Determinant of Ladeveze's tensor H
       eqStrain    ,    // Equivalent strain
       detHold     ,    // Determinant of Ladeveze's tensor H at previous iteration
       FirstDeigvec1,   // X coordinate of first eigenvector
       FirstDeigvec2,   // Y coordinate of first eigenvector
       SecondDeigvec1,  // X coordinate of second eigenvector
       SecondDeigvec2,  // Y coordinate of second eigenvector
       Rnumbers    ,    // Region numbers for removing damaged elements
       epsnlP0     ;    //  Equivalent nonlocal strain at Gauss points    
   
   //[P0,P0] field
   Wh00 def2(Firsteigvec),       //First eigenvector of the damage tensor
   	def2(Secondeigvec);      //Second eigenvector of damage tensor
/*   Isv8old     ,    // Component i2H11 of \mathbf{H}^{-2} tensor at previous iteration*/
/*       Isv9old     ,    // Component i2H22 of \mathbf{H}^{-2} tensor at previous iteration*/
/*       Isv11old    ,    // Component sqrt(2.)*i2H12 of \mathbf{H}^{-2} tensor at previous iteration */
/*                                                                                                                                                                                                                                                                                     */
//============================================================================
// ------- Material Tensor using Quadrature FE space -------                  
// -------------------------------------------------------------------        
// Mt[int]  : is an array of finite element variable belonging to quadratu    
//            re space Qh. This array is used  to define components of the    
//            material tensor. 3X3 in 2D and 6X6 in 3D                        
//            In 2D elasticity the material tensor looks like                            
//                                                                            
//         [ 2*mu+lambda ,  lambda      , 0 ]    [ Mt11 , Mt12 , Mt13 ]       
//   Mt =  [ lambda      ,  2*mu+lambda , 0 ] =  [ Mt12 , Mt22 , Mt23 ]       
//         [   0         ,     0        , mu]    [ Mt13 , Mt23 , Mt33 ]       
//                                                                            
// PsdMfrontHandler : is a function in mfront interface that helps            
//                    building the material tensor  Mt  given with            
//                    material prpts.  from  ControlParameters.edp            
//============================================================================
                                                                              
  Mh           [ Mt11 ,  Mt12 , Mt13 ,                                        
                         Mt22 , Mt23 ,                                        
                                Mt33 ]; 
                                
      
//============================================================================
// ------- Stress/Strain Tensor using Quadrature FE space -------             
// -------------------------------------------------------------------        
// Eps  : is array of finite element variable belonging to quadrature         
//         space Sh. This array  is  used  to define components of the        
//         symmetric Strain tensor. 3X3 in 2D hence 3 components.  
// Epsold : same as before but from the previous iteration           
// Sig  : is array of finite element variable belonging to quadrature         
//         space Sh. This array  is  used  to define components of the        
//         symmetric Strain tensor. 3X3 in 2D hence 3 components.
// ExtT : External temperature field in quadrature space
// ExtEpnsl : External nonlocal equivalent strain field in quadrature space          
//============================================================================
                                                                              
   Sh [Eps11,Eps22,Eps12];
   Sh [EpsOld11,EpsOld22,EpsOld12];                                                  
   Sh [Sig11,Sig22,Sig12];  
   Sh2 [ExtT,ExtEpsnl];
                                                                                                                    
//============================================================================
// ------- Internal state variable  vector using Quadrature FE space -------  
// -------------------------------------------------------------------        
// Isv  : is array of finite element variable belonging to quadrature         
//         space Ih. This array  is  used  to define components of the        
//         elastic Strain tensor (first four components). And a plastic       
//         state componenent the last 5th component.
//
//  Isv0 = rH11, Isv1 = rH22, Isv2 = rH33, Isv3 = sqrt(2.)*rH12, Isv4 = D11, Isv5 = D22, 
//  Isv6 = D33, Isv7 = sqrt(2.)*D12, Isv8 = i2H11, Isv9 = i2H22, Isv10 = i2H33, Isv11 = sqrt(2.)*i2H12,
//  Isv12 = ey.                          
//============================================================================
                                                                              
   Ih [ Isv0, Isv1, Isv2, Isv3, Isv4, Isv5, Isv6, Isv7, Isv8, Isv9, Isv10, Isv11, Isv12 ];
   
   //Ih [ Isv0old, Isv1old, Isv2old, Isv3old, Isv4old, Isv5old, Isv6old, Isv7old, Isv8old, Isv9old, Isv10old, Isv11old, Isv12old ];
   
//============================================================================
// ------- Calling for the first time in order to use the variational formulation with damage tensor -------  
// -------------------------------------------------------------------  
   
   Tempera[] = temperature;
   [ExtT,ExtEpsnl] = [Tempera,epsnlP0];
   
   PsdMfrontHandler( MaterialBehaviour                                      , 
                          mfrontBehaviourHypothesis = MaterialHypothesis     , 
                          mfrontPropertyNames       = PropertyNames          , 
                          mfrontPropertyValues      = PropertyValues         ,
                          mfrontExternalStateVariableNames =ExternalStateVariablesNames,
                          mfrontExternalStateVariableValues = ExtT[] 	      ,
                           mfrontPreviousStrainTensor        = EpsOld11[]      ,
                          mfrontMaterialTensor      = Mt11[]                 ,
                          mfrontStrainTensor        = Eps11[]                , 
                          mfrontStressTensor        = Sig11[]                , 
                        mfrontStateVariable       = Isv0[]  ,
                        mfrontExternalStateVariableVector = ExtT[]                
                        );   
                                              
                                                    
                                                                              
//============================================================================
// ------- Fem matrices and vectors -------                                   
// -------------------------------------------------------------------        
// A  :  FEM matrix assembled  linear momentum Eq. (stiffness matrix)         
// A1 :  FEM matrix assembled  Helmothz Eq.(stiffness matrix)     
// b  :  RHS vector for the FE linear system  from linear momentum Eq.        
// b1 :  RHS vector for the FE linear system  from Helmothz Eq.  
//============================================================================
                                                                              
  matrix  A, A1                              ;                                
  real[int]  b(Vh.ndof), b1(Vh1.ndof)        ;                                 
