/**************************************************************************************
*                                                                                     *
*           This file is a part of PSD project                                        *
*                                                                                     *
*       -------------------------------------------------------------------           *
*                                                                                     *
*       Copyright 2019-2025 CEA/DES                                                   *
*                                                                                     *
*       Licensed under the Apache License, Version 2.0  (the "License");              *
*       you may not use this file except in compliance with the License.              *
*       You may obtain a copy of the License at                                       *
*                                                                                     *
*           http://www.apache.org/licenses/LICENSE-2.0                                *
*                                                                                     *
*       Unless required by applicable law or agreed to in writing, software           *
*       distributed under the License is distributed on an  "AS IS"  BASIS,           *
*       WITHOUT  WARRANTIES  OR  CONDITIONS  OF  ANY  KIND,  either express           *
*       or implied. See  the License  for  the  specific language governing           *
*       permissions and limitations under the License.                                *
*                                                                                     *
*       -------------------------------------------------------------------           *
*                                                                                     *
*                                                                                     *
*       Comment:  This test simply checks if the loading of MatrixPlotter             *
*                 works well                                                          *
*                                                                                     *
**************************************************************************************/  

//---------Preprocessing for point bounday conditions----------//
  cout << "PbcCord size:" << PbcCord.n << endl;
  GetPointIndiciesMpiRank(PbcCord, PCi);

//---------Initializing variables----------//
 
  real totaliter = 0.;
  mufield[]      = mu;
  lambdafield[]  = lambda;
  Tempera[] = temperature;
  int celldamaged = 0;

      

//==============================================================================
// --- Pseudo-time loop until the maximum applied displacement is reached ---
//==============================================================================
timerbegin("Applied displacement while loop",t0)
while (tr <= maxtr){

  cout <<  "-------------------------------------------------------\n"
       <<  "Applied displacement (mm) " << tr << "\n" << endl;

  cout <<  "-------------------------------------------------------\n"
       <<  "Solution step " << iterout << "\n" << endl;
       
  //--------------------Assembly for linear----------------------//
    b = elast(0,Vh);
  
  //-----------------------Nonlinear loop------------------------//
  

  for(int iter=0; iter<200; iter++){
    
    cout << " FIXED POINT SOLUTION ITERATION " << iter << "\n" << endl;
     
    //----------------Assembly for bilinear----------------------//

    A = elast(Vh,Vh,solver=CG,sym=1);
    
    //---------Additional assembly for A & b (point bounday condition)----------//
    ApplyPointBc0(A,b);
    ApplyPointBc1(A,b);
    ApplyPointBc2(A,b);
    ApplyPointBc3(A,b); 
    
    //set(A,sparams =" -ksp_type cg -ksp_rtol 1e-9 ");
    set(A,solver=CG,sym=1);
    u[] = A^-1*b;
    
    cout << "Displacement : " << endl;
    cout << u1(2.5,10) << endl;
    
    e11 = epsilon(u)[0] ;
    e22 = epsilon(u)[1] ;
    e12 = epsilon(u)[2]/SQ2 ; //epsilon(u)[2] is already divided by sqrt(2) so it makes the real component e12 = (dy(i)+dx(i#1))/2 
    
    ep1=0.5*(e11+e22)+sqrt((0.5*(e11+e22))^2-(e11*e22 - e12^2));
    ep2=0.5*(e11+e22)-sqrt((0.5*(e11+e22))^2-(e11*e22 - e12^2));
    
    // Von-mises eq strain
    I1eps = e11 + e22;
    J2eps = 1./2.*(e11^2+2*e12^2+e22^2)-1./6.*((e11+e22)^2);
    
    eqStrain = ((kmises-1.)/(2.*kmises*(1.-2.*nu)))*I1eps + (1./(2.*kmises))*sqrt((((kmises-1.)/(1.-2.*nu))*I1eps)^2 + (12.*kmises*J2eps)/((1.+nu)^2)); // Von mises equivalent strain
    
    //eqStrain = sqrt((max(0,ep1))^2 + (max(0,ep2))^2)  ;  // Mazars Eq strain
   
    
    //----------------Assembly for bilinear----------------------//

    A1 = endo(Vh1,Vh1,solver=CG,sym=1);

    //--------------------Assembly for linear----------------------//

    b1 = endo(0,Vh1);

    //-------------Linear system solving phase-------------------//

    set(A1,solver=CG,sym=1);
    epsnl[] = A1^-1*b1;
    
    epsnlP0 = epsnl;                              //Equivalent nonlocal strain in Gauss points
    //epsnlP0 = 1.5*epsnlP0 + (1.-1.5)*eqStrain;      //Over-nonlocal model ideal for ENLG
    //-----Update Stress, Hook's effective tensor and state variables using Mfront-------------------//   
        
    [Eps11,Eps22,Eps12] = epsilon(u); 
  
    [ExtT,ExtEpsnl] = [Tempera,epsnlP0];
 
    PsdMfrontHandler( MaterialBehaviour                                      , 
                          mfrontBehaviourHypothesis = MaterialHypothesis     , 
                          mfrontPropertyNames       = PropertyNames          , 
                          mfrontPropertyValues      = PropertyValues         ,
                          mfrontExternalStateVariableNames =ExternalStateVariablesNames,
                          mfrontExternalStateVariableValues = ExtT[],
                          mfrontPreviousStrainTensor        = EpsOld11[]    ,
                          mfrontMaterialTensor      = Mt11[]                 ,
                          mfrontStrainTensor        = Eps11[]                , 
                          mfrontStressTensor        = Sig11[]                , 
                        mfrontStateVariable       = Isv0[]   ,
                        mfrontExternalStateVariableVector = ExtT[]                
                        );                   
                                                                                                               
    EpsOld11[] = Eps11 []; 
       
    H11 = Isv0+1.; //rH damage state variable from Mfront is rH = H - I. We add 1. to obtain the real H tensor
    H22 = Isv1+1.;
    H12 = Isv3/SQ2; //off-diagonal terms come from Mfront with sqrt(2.) multiplication
    detH = H11*H22 - H12*H12; 
 	
    //Computing damage tensor eigenvalues
    D1=0.5*(Isv4+Isv5)+sqrt((0.5*(Isv4+Isv5))^2-(Isv4*Isv5 - Isv7*Isv7/2)); //because D12 = Isv7 commes with sqrt(2) from mfront
    D2=0.5*(Isv4+Isv5)-sqrt((0.5*(Isv4+Isv5))^2-(Isv4*Isv5 - Isv7*Isv7/2));
    
    //Approach A for taking out elements from a region
    // DELETING WITHOUT CONSTRAIN
    Rnumbers = region;
    //cout << "MATERIAL REGION: " << Rnumbers(0,0.5) << endl;
    Rnumbers = (0.999 < D1 ? 0 : Rnumbers); // Criterion function for element tag out
    //cout << "MATERIAL REGION AFTER: " << Rnumbers(0,0.5) << endl;
    Th = change(Th,fregion=real(Rnumbers));


/*    */ //CONSTRAINED DELETING
/*    //Modified approach for taking out elements from a region*/
/*    //This ensures one taging out one element by iteration*/
/*    Rnumbers = region;*/
/*    //Loop for all triangles*/
/*    if (celldamaged == 0){*/
/*	    int[int] index;*/
/*	    for (int i=0; i < Th.nt; i++){*/
/*	    	if (D1[](i) > 0.99 && Rnumbers[](i) != 0){*/
/*	    		index.resize(index.n + 1);*/
/*	    		index(index.n-1) = i;*/
/*	    	}*/
/*	    }*/
/*	    */
/*	    cout << "index is of size: " <<	index.n << endl;*/
/*	    */
/*	    for (int k=0; k < index.n-1; ++k){*/
/*	    	if (D1[](index(k)) < D1[](index(k+1))){*/
/*	    		celldamaged = index(k+1);*/
/*	    	}*/
/*	    	else {*/
/*	    	    	celldamaged = index(k);*/
/*	    	}*/
/*	    }*/
/*	    */
/*	    if (index.n == 1){*/
/*	    	celldamaged = index(0);*/
/*	    }*/
/*	    */
/*	    if (celldamaged != 0){*/
/*	    	Rnumbers[](celldamaged) = 0;*/
/*	    	Th = change(Th,fregion=real(Rnumbers));*/
/*	    	cout << " most damaged cell : " << celldamaged << endl;*/
/*		cout << " damage D1 : " << D1[](celldamaged) << endl;*/
/*	    }*/
/*    }           */
/*    celldamaged = 0;*/
    //                                                                                                                                                                                                                           
    //------------------Error calculation------------------------//

    uold[]    = uold[]-u[]                         ;
    epsnlold[]  = epsnlold[]-epsnl[]                     ;
    real err1 = sqrt( intN(Th,qforder=2) ( uold^2   )  )     ;
    real err2 = sqrt( intN(Th,qforder=2) ( epsnlold^2 )  )     ;

    //--------------------Solution update for the iteration -------------------------//

    epsnlold[] = epsnl[]  ;
    uold[]   = u[]    ;
    
    // Using variables from last iteration for the ENLG formulation - NEW
    // Explodes in iteration sometimes and becomes unstable
    // Needs to critically reduce the time step
/*    Isv8old = Isv8;*/
/*    Isv9old = Isv9;*/
/*    Isv11old = Isv11;*/
/*    detHold[] = detH[];*/

/*    Isv8old[] = Isv8[];*/
/*    Isv9old[] = Isv9[];*/
/*    Isv11old[] = Isv11[];*/
/*    detHold[] = detH[];*/
/*    */
    
    if(err1 < 1e-3 && err2 < 1e-3){

      //------------------Screen output norm----------------------//
      totaliter = iter;
      cout.scientific
      << "NL iteration number :  [ "      << iter
      << " ]\nL2 error in [u,epsnl] :  [ "  << err1
      << " , " <<  err2 << " ]"           << endl;
    
     // Using results from last previous converged step 
     // More stable and does not need small time steps
     Isv8old = Isv8;
     Isv9old = Isv9;
     Isv11old = Isv11;
     //Isv1old[] = Isv1[];
     detHold[] = detH[];  
      break;
    }//if error
    

  }//for loop
  
  //-------------------Eigenvectors of damage tensor calculation-----------------------//
  
  FirstDeigvec1 = -(-Isv4 + sqrt( 4.*( (Isv7/SQ2)^2 ) + (Isv4-Isv5)^2 ) + Isv5 )/(2.*max(0.0001,Isv7/SQ2));
  FirstDeigvec2 = 1.;
	    
  SecondDeigvec1 = (Isv4 + sqrt( 4.*( (Isv7/SQ2)^2 ) + (Isv4-Isv5)^2 ) - Isv5 )/(2.*max(0.0001,Isv7/SQ2));
  SecondDeigvec2 = 1.;
	    
  def2(Firsteigvec) = [FirstDeigvec1,FirstDeigvec2];
  def2(Secondeigvec) = [SecondDeigvec1,SecondDeigvec2];
  
  //-------------------Force calculation-----------------------//

  real forcetotx  = 0. , forcetoty  = 0.;

  [Eps11,Eps22,Eps12] = epsilon(u);  
                                                                                                 
  [ExtT,ExtEpsnl] = [Tempera,epsnlP0];
 
  
  PsdMfrontHandler( MaterialBehaviour                                      , 
                          mfrontBehaviourHypothesis = MaterialHypothesis     , 
                          mfrontPropertyNames       = PropertyNames          , 
                          mfrontPropertyValues      = PropertyValues         ,
                          mfrontExternalStateVariableNames =ExternalStateVariablesNames,
                          mfrontExternalStateVariableValues = ExtT[],
                           mfrontPreviousStrainTensor        = EpsOld11[]    ,
                          mfrontMaterialTensor      = Mt11[]                 ,
                          mfrontStrainTensor        = Eps11[]                , 
                          mfrontStressTensor        = Sig11[]                , 
                        mfrontStateVariable       = Isv0[],
                        mfrontExternalStateVariableVector = ExtT[]                   
                        );     

  A = varfForce(Vh,Vh,solver=CG,sym=1);
  F[] = A*u[];

  // Applying the force calculation if point load applied

  forcetotx = F[][PCi[0]*2+0];//+F[][PCi[1]*2+0];
  forcetoty = F[][PCi[0]*2+1];//+F[][PCi[1]*2+1];
  //forcetoty = F1(75,100);

  //-------------------Structural response data-----------------------//
  ofstream ff(ThNbTriang + "_" + model + ".data",append);
  ff << u1(2.5,0) << "  " << u1(75,100) << "  " << forcetotx << "  " << forcetoty << endl;


  //-------Paraview plotting every nth iteration -----------//

  iterout++;

/*  if(int(iterout%timesteps)==0){*/
/*    savevtk(     "VTUs/Solution_"+iterout1+".vtu"  ,*/
/*                 Th                 ,*/
/*                 PlotVec(u)         ,*/
/*                 epsnl               ,*/
/*                 Sig11               ,*/
/*                 Sig22               ,*/
/*                 Sig12               ,*/
/*                 Isv0               ,*/
/*                 Isv1               ,*/
/*                 Isv2               ,*/
/*                 Isv3               ,*/
/*                 Isv4               ,*/
/*                 Isv5               ,*/
/*                 Isv6               ,*/
/*                 Isv7               ,*/
/*                 Isv12               ,*/
/*                 D1		    ,*/
/*                 D2		    ,*/
/*                 PlotVec(Firsteigvec),*/
/*                 PlotVec(Secondeigvec),	*/
/*                 order=vtuorder     ,*/
/*                 dataname = "U epsnl s11 s22 s12 rH11 rH22 rH33 rH12 D11 D22 D33 D12 eyy D1 D2 Firsteigvec Secondeigvec"*/
/*          );*/

/*    iterout1++;*/
/*    }//if iterout*/
    
  if(int(iterout%timesteps)==0){
    savevtk(     "VTUs/Solution_"+iterout1+".vtu"  ,
                 Th                 ,
                 PlotVec(u)         ,
                 epsnl               ,
                 PlotTens(Sig11,Sig22,Sig12/SQ2),
                 PlotTens(Isv4,Isv5,Isv7/SQ2),
                 order=vtuorder     ,
                 dataname = "U epsnl Sig D"
          );

    iterout1++;
    }//if iterout

  //-----------------Debug glut plotting----------------------//
  //plot(u1,fill=1,value=1);
  plot(Isv4,fill=1,value=1);


  //-----------------updating traction----------------//
  //tr += dtr;
  if (totaliter <= 1.){
     tr += dtr;
  }
  else{
     tr += (1./(totaliter))*dtr;
  }
  //----------Adjust Dirichlet boundary conditions--------------//              
                                                                                
  //duimp = dtr ; 

}//while loop

timerend("Applied displacement while loop",t0)
timerend("Solver",t1)

//-------------------------------THE END------------------------------//
