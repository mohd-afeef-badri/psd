@DSL ImplicitII;
@Behaviour desmorat3Dnonlocal;
@Author Breno Ribeiro Nogueira;
@Date 19 / 04 / 2023;

@Theta 1.;

@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");

@MaterialProperty real B;
B.setEntryName("Brittleness");
@MaterialProperty real k0;
k0.setEntryName("Kappa0");
@MaterialProperty real S;
S.setEntryName("BigS");
@MaterialProperty real s;
s.setEntryName("SmallS");

// H-Id
@StateVariable Stensor rH; //Ladeveze variable minus identity
@ExternalStateVariable real epsnl;
//@StateVariable Stensor d;  //Damage tensor
//@StateVariable Stensor g;  //Metric tensor
//@StateVariable Stensor ig;  //Inverse of the Metric tensor
//@StateVariable real detg;  //determinant Metric tensor

@AuxiliaryStateVariable Stensor d;
@AuxiliaryStateVariable Stensor iH2;
@AuxiliaryStateVariable strain ey;


//Bulk and shear modulus
@LocalVariable stress K;
@LocalVariable stress G;
@LocalVariable Stensor sig_n;


@InitLocalVariables{
    // Define constants
    K = (young) / (3. * (1. - 2. * nu));
    G = computeMu(young, nu);    
}

@Predictor {
  const auto e = eval(eto+deto);
  const auto tr_e = trace(e);
  const auto H = rH + Stensor::Id();
  const auto iH = invert(H);
  iH2 = square(iH);
  const auto tr_iH2 = trace(iH2);
 
  if (tr_e > 0) {
    const auto tr_H2 = H | H;
    sig_n = 2. * G * (symmetric_product_aba(iH, e) - (iH2 | e) * iH2 / tr_iH2) +
          3. * K / tr_H2 * tr_e * Stensor::Id();
  } else {
    sig_n = 2. * G * (symmetric_product_aba(iH, e) - (iH2 | e) * iH2 / tr_iH2) +
          K * tr_e * Stensor::Id();
  }
  
}

@Integrator { 
  // total strain at the end of the time step
  const auto e = eval(eto + deto);
  const auto tr_sig = trace(sig_n);
  
  // approximation: the triaxilaty is assumed to be constant
  const auto Rv = [&tr_sig, this] {
    if (tr_sig > 0) {
      return min(real(1), B);
    }
    const auto seq = sigmaeq(sig_n);
    if (seq > 1e-12 * young) {
      const auto Tx = tr_sig / (3. * seq);     // sigma_h attention in 2D formulation
      //const auto Rv1 = 1. + 9. * (1. - 2.* nu) / (3. * (1. + nu)) * Tx * Tx; // correct ?
      const auto Rv1 = 1 + 9 * (1 - 2 * nu) / (2 * (1 + nu)) * Tx * Tx;
      return min(Rv1, B);
    }
    return B;
  }();
  
  // Mazars' equivalent strain
  const auto epsnleq = epsnl;
  // damage evolution
  const auto Rv_s = pow(Rv, s);
  //const auto imetric = Stensor::Id() - d;
  //const auto metric = invert(imetric);
  //rH = square(metric);
  const auto tr_rH = trace(rH);
  // yield strain

  ey = k0 + S * Rv_s * tr_rH;
  if (epsnleq > ey) {
    const auto tr_sig = trace(sig_n);
    const auto et = (-nu / young) * tr_sig * Stensor::Id() + ((1 + nu) / young) * sig_n;
    // positive part of the strain
    const auto etp = positive_part(e);
    // norm etp
    const auto normetp = sqrt((etp|etp));
    // direction N
    const auto Ntens = etp/normetp;
    // updated trace of H-I value so e_mazars=ey
    const auto ntr_rH = (epsnleq - k0) / (S * Rv_s); 
    // lagrange multiplier
    const auto dl = (ntr_rH - tr_rH) / (max(trace(Ntens),strain(1e-14)));
    // updating the damage
    frH -= dl * Ntens;
  }
  
  
  const auto tr_e = trace(e);
  const auto H = rH + Stensor::Id();
  const auto iH = invert(H);
  iH2 = square(iH);
  d = Stensor::Id() - iH2;
  const auto tr_iH2 = trace(iH2);

  if (tr_e > 0) {
    const auto tr_H2 = H | H;
    sig = 2. * G * (symmetric_product_aba(iH, e) - (iH2 | e) * iH2 / tr_iH2) +
          3. * K / tr_H2 * tr_e * Stensor::Id();
  } else {
    sig = 2. * G * (symmetric_product_aba(iH, e) - (iH2 | e) * iH2 / tr_iH2) +
          K * tr_e * Stensor::Id();
  }

}

//@UpdateAuxiliaryStateVariables{
//  const auto H = rH + Stensor::Id();
//  const auto iH = invert(H);
//  iH2 = square(iH); 
  //updating damage variable
//  d = Stensor::Id() - iH2;
//}

@TangentOperator{
  const auto e = eto;
  const auto tr_e = trace(e);
  const auto tr_sig = trace(sig);
  
  // computing H
  const auto H = rH + Stensor::Id();
  const auto iH = invert(H);
  iH2 = square(iH);
  const auto tr_iH2 = trace(iH2);

  if (tr_sig > 0) {
    const auto tr_H2 = H | H;   
    Dt = 2. * G*(symmetric_product_derivative_daba_db(iH)- (iH2^iH2)/tr_iH2) + 3. * K / tr_H2 * (Stensor::Id()^Stensor::Id());
  } else {
    Dt = 2. * G*(symmetric_product_derivative_daba_db(iH)- (iH2^iH2)/tr_iH2) +  K * (Stensor::Id()^Stensor::Id());
    
  }

}
